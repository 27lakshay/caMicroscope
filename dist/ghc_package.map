{"version":3,"sources":["GHCHelpers.js","ghc_package.js"],"names":["GHCHelpers","project","location","dataset","store","viewer","COLUMN_POSITION_TAG","COLUMNS_TAG","FUNCTIONAL_GROUP_SEQUENCE_TAG","PLANE_POSITION_SEQUENCE_TAG","ROW_POSITION_TAG","ROWS_TAG","SERIES_INSTANCE_UID_TAG","SOP_INSTANCE_UID_TAG","STUDY_INSTANCE_UID_TAG","TOTAL_PIXEL_MATRIX_COLUMNS_TAG","TOTAL_PIXEL_MATRIX_ROWS_TAG","updatedDicomUrl","cookiename","cookiestring","RegExp","exec","document","cookie","token","decodeURIComponent","toString","replace","path","study","baseUrl","seriesPath","ajax","toDicomWebQIDOUrl","jqXHR","responseJSON","error","code","message","series","instancesPath","Value","instances","maxWidthPx","maxHeightPx","tileWidthPx","tileHeightPx","levelWidths","Set","i","length","w","Number","add","h","sortedLevelWidths","Array","from","values","sort","a","b","countLevels","size","pyramidMeta","calculatePyramidMeta","level","row","col","x","params","toDicomWebWADOUrl","SOPInstanceUID","FrameNumber","bind","open","tileSource","err","alert","dicomInstances","widthToLevelMap","sopInstanceUID","frameMeta","j","frameNumber","y","key","indexOf","CaMic","prototype","loadImg","func","urlParams","img_id","URLSearchParams","window","search","get","slideId","slideName","specimen","data_store","ghc_study","mpp","mpp_x","mpp_y","loadInstancesInStudy","name","url","call"],"mappings":"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","file":"ghc_package.map","sourceRoot":"../package","sourcesContent":[" class GHCHelpers {\n   // adatped from https://github.com/GoogleCloudPlatform/dicomweb-wsi-viewer/blob/master/viewer.js\n   constructor(project, location, dataset, store, viewer){\n     this.viewer = viewer\n     // required params\n     this.project = project\n     this.location = location;\n     this.dataset = dataset;\n     this.store = store;\n     // dicom standar attribute tags\n     this.COLUMN_POSITION_TAG = '0048021E';\n     this.COLUMNS_TAG = '00280011';  // Number of columns in the image\n     // Per-frame Functional Groups Sequence\n     this.FUNCTIONAL_GROUP_SEQUENCE_TAG = '52009230';\n     this.PLANE_POSITION_SEQUENCE_TAG = '0048021A';  // Plane Position Sequence\n     this.ROW_POSITION_TAG = '0048021F';\n     this.ROWS_TAG = '00280010';  // Number of rows in the image\n     this.SERIES_INSTANCE_UID_TAG = '0020000E';\n     this.SOP_INSTANCE_UID_TAG = '00080018';\n     // Unique identifier for the Series that is part of the Study\n     this.STUDY_INSTANCE_UID_TAG = '0020000D';\n     // Total number of columns in pixel matrix\n     this.TOTAL_PIXEL_MATRIX_COLUMNS_TAG = '00480006';\n     // Total number of rows in pixel matrix\n     this.TOTAL_PIXEL_MATRIX_ROWS_TAG = '00480007';\n     // google url, may change??\n     this.updatedDicomUrl = 'https://healthcare.googleapis.com/v1beta1/projects/'\n     // token stuff\n     var cookiename = \"GHCToken\"\n     var cookiestring=RegExp(\"\"+cookiename+\"[^;]+\").exec(document.cookie);\n     this.token = decodeURIComponent(!!cookiestring ? cookiestring.toString().replace(/^[^=]+./,\"\") : \"\");\n   }\n\n   toDicomWebQIDOUrl(path) {\n     return this.updatedDicomUrl + path + '?includefield=all&access_token=' + this.token;\n\n   }\n   toDicomWebWADOUrl(path) {\n     return this.updatedDicomUrl + path + '?access_token=' + this.token;\n   }\n   loadInstancesInStudy(study) {\n     var baseUrl = this.project + \"/locations/\"+ this.location +\"/datasets/\" + this.dataset + \"/dicomStores/\" + this.store + \"/dicomWeb/studies/\"\n     const pathToStudy = baseUrl + study\n     const seriesPath = pathToStudy + '/series';\n     $.ajax({\n       url: this.toDicomWebQIDOUrl(seriesPath),\n       error: function(jqXHR) {\n         alert(\n             'Error - retrieving series failed: ' +\n             jqXHR.responseJSON[0].error.code + ' ' +\n             jqXHR.responseJSON[0].error.message);\n       },\n       success: function(series) {\n         const instancesPath = seriesPath + '/' +\n             series[0][this.SERIES_INSTANCE_UID_TAG].Value[0] + '/instances';\n         $.ajax({\n           url: toDicomWebQIDOUrl(instancesPath),\n           error: function(jqXHR) {\n             alert(\n                 'Error - retrieving instances failed: ' +\n                 jqXHR.responseJSON[0].error.code + ' ' +\n                 jqXHR.responseJSON[0].error.message);\n           },\n           success: function(instances) {\n             try {\n               let maxWidthPx = 0;\n               let maxHeightPx = 0;\n               let tileWidthPx = 0;\n               let tileHeightPx = 0;\n               let levelWidths = new Set();\n\n               for (let i = 0; i < instances.length; i++) {\n                 const w =\n                     Number(instances[i][this.TOTAL_PIXEL_MATRIX_COLUMNS_TAG].Value);\n                 levelWidths.add(w);\n                 const h = Number(instances[i][this.TOTAL_PIXEL_MATRIX_ROWS_TAG].Value);\n\n                 if (w > maxWidthPx) {\n                   maxWidthPx = w;\n                 }\n                 if (h > maxHeightPx) {\n                   maxHeightPx = h;\n                 }\n                 tileWidthPx = Number(instances[i][this.COLUMNS_TAG].Value);\n                 tileHeightPx = Number(instances[i][this.ROWS_TAG].Value);\n               }\n               const sortedLevelWidths = Array.from(levelWidths.values());\n               sortedLevelWidths.sort((a, b) => b - a);\n\n               const countLevels = levelWidths.size;\n               // Compute pyramid cache\n               // Map of \"x,y,z\" => {SOPInstanceUID, Frame No.}\n               const pyramidMeta =this.calculatePyramidMeta(instances, sortedLevelWidths);\n\n               tileSource = {\n                 height: maxHeightPx,\n                 width: maxWidthPx,\n                 tileSize: tileWidthPx,\n                 maxLevel: countLevels - 1,\n                 minLevel: 0,\n                 getTileUrl: function(level, row, col) {\n                   const x = 1 + (tileWidthPx * row);\n                   const y = 1 + (tileHeightPx * col);\n                   const z = countLevels - 1 - level;\n                   const key = x + '/' + y + '/' + z;\n                   const params = pyramidMeta[key];\n                   return this.toDicomWebWADOUrl(\n                       instancesPath + '/' + params.SOPInstanceUID + '/frames/' +\n                       params.FrameNumber + '/rendered');\n                 }.bind(this),\n                 getLevelScale: function(level) {\n                   return sortedLevelWidths[countLevels - 1 - level] / maxWidthPx;\n                 }\n               };\n               viewer.open(tileSource)\n             } catch (err) {\n               alert(\n                   `Could not parse DICOM for study, possible reason: DICOM is not\n                   pathology or damaged image.`);\n             }\n           }.bind(this)\n         });\n       }.bind(this)\n     });\n   }\n   calculatePyramidMeta(dicomInstances, sortedLevelWidths) {\n     let widthToLevelMap = {};\n     for (let i = 0; i < sortedLevelWidths.length; i++) {\n       widthToLevelMap[sortedLevelWidths[i]] = i;\n     }\n\n     let pyramidMeta = {};\n     for (let i = 0; i < dicomInstances.length; i++) {\n       const sopInstanceUID = dicomInstances[i][this.SOP_INSTANCE_UID_TAG].Value;\n       const frameMeta = dicomInstances[i][this.FUNCTIONAL_GROUP_SEQUENCE_TAG].Value;\n\n       for (let j = 0; j < frameMeta.length; j++) {\n         const frameNumber = j + 1;\n\n         // For (x,y) should actually use\n         // FrameContentSequence.DimensionIndexValues which an array of\n         // size 2 with [x, y]. The below are pixel values and need to be\n         // diveded by frameWidth/frameHeight.\n         // PerFrameFunctionalGroupsSequence.PlanePositionSlideSequence.ColumnPositionInTotalImagePixelMatrix\n         const x = frameMeta[j][this.PLANE_POSITION_SEQUENCE_TAG]\n                       .Value[0][this.COLUMN_POSITION_TAG]\n                       .Value;\n         // PerFrameFunctionalGroupsSequence.PlanePositionSlideSequence.RowPositionInTotalImagePixelMatrix\n         const y = frameMeta[j][this.PLANE_POSITION_SEQUENCE_TAG]\n                       .Value[0][this.ROW_POSITION_TAG]\n                       .Value;\n\n         const w = Number(dicomInstances[i][this.TOTAL_PIXEL_MATRIX_COLUMNS_TAG].Value);\n         const z = sortedLevelWidths.indexOf(w);\n\n         const key = x + '/' + y + '/' + z;\n         pyramidMeta[key] = {\n           'SOPInstanceUID': sopInstanceUID,\n           'FrameNumber': frameNumber,\n         };\n       }\n     }\n     return pyramidMeta;\n   }\n }\n\n\nexport default GHCHelpers\n","import GHCHelpers from './GHCHelpers.js'\n// this is not working yet. WIP until I can look at the data\nCaMic.prototype.loadImg = function(func) {\n  // do we have a GHC token?\n  // load up!\n  var urlParams = new URLSearchParams(window.location.search);\n  var img_id = urlParams.get('slideId');\n  this.slideId = img_id\n  this.slideName = img_id\n  this.study = \"\"\n  this.specimen = \"\"\n  // TODO make based on url\n  this.project = \"public-datasets-194701\"\n  this.location = \"us-central1\"\n  this.data_store = \"test1\"\n  this.dataset = \"rbirmin_dicom_test\"\n  this.ghc_study = \"1.2.276.0.7230010.3.1.2.1784940379.231387.1533066220.970617\" // the thing we expect to change\n\n  this.mpp = 1e9;\n  this.mpp_x = this.mpp; // until we can fix this\n  this.mpp_y = this.mpp;\n  var ghc = new GHCHelpers(this.project, this.location, this.dataset, this.data_store, this.viewer)\n  ghc.loadInstancesInStudy(this.ghc_study) // opens viewer to its own custom source\n\n  // create item to pass to the callback function, previously x[0] (slide data)\n  let x = {}\n  x['_id'] = this.slideId\n  x.name = this.slideName\n\n  x.study = this.study\n  x.specimen = this.specimen\n  x.mpp = this.mpp;\n  x.mpp_x = this.mpp_x;\n  x.mpp_y = this.mpp_y;\n  x.location = \"GHC--\" + this.slideId\n  x.url = \"WHOOPS\"; // oh no, the secondary viewers...\n  if (func && typeof func === 'function') {\n    func.call(null, x);\n  }\n}\n"]}