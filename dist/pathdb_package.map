{"version":3,"sources":["pathdb_package.js"],"names":["PathDbMods","convertPathDbSlide","data","x","mpp","source","pathdbid","nid","value","name","location","field_iip_path","field_mpp_y","length","mpp_y","field_mpp_x","mpp_x","referencepixelphysicalvaluey","referencepixelphysicalvaluex","url","subject_id","image_id","study_id","field_subject_id","clinicaltrialsubjectid","field_image_id","imageid","field_study_id","studyid","getCookie","key","cookiestring","RegExp","exec","document","cookie","decodeURIComponent","toString","replace","log","then","json","hasOwnProperty","token","warn","prototype","default_findSlide","Store","findSlide","slide","specimen","study","fetch","Headers","response","ok","statusText","default_getSlide","getSlide","id","default_getCurrentStatesURL","StatesHelper","getCurrentStatesURL","isImageCoordinate","states","getCurrentStates","encodeStates","origin","pathname","$D","params","slideId","mode","console"],"mappings":"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","file":"pathdb_package.map","sourceRoot":"../package","sourcesContent":["function PathDbMods() {\n  console.log(\"PathDbMods()...\");\n  // put the auth jwt in cookie as token\n  fetch(\"/jwt/token\", {\n    method: 'GET',\n    credentials: 'include'\n  }).then(x => x.json()).then(x => {\n    console.log(x)\n    if (x.hasOwnProperty('token') && x.token) {\n      document.cookie = \"token=\" + x.token + \";\"\n    }\n  })\n\n  function convertPathDbSlide(data){\n    let x={}\n    x[\"_raw\"] = data\n    x.mpp = 1e9\n    x.source=\"pathdb\"\n    let pathdbid = data.nid[0].value\n    // default dislpay name\n    x.name = pathdbid\n    x[\"_id\"] = {\"$oid\": pathdbid}\n    x.location = data.field_iip_path[0].value\n    if (data.field_mpp_y && data.field_mpp_y.length >= 1) {\n      this.mpp_y = data.field_mpp_y[0].value\n      this.mpp = this.mpp_y\n    }\n    if (data.field_mpp_x && data.field_mpp_x.length >= 1) {\n      x.mpp_x = data.field_mpp_x[0].value\n      x.mpp = this.mpp_x\n    }\n    if (data.referencepixelphysicalvaluey && data.referencepixelphysicalvaluey.length >=1){\n      x.mpp_y = data.referencepixelphysicalvaluey[0].value\n      x.mpp = this.mpp_y\n    }\n    if (data.referencepixelphysicalvaluex && data.referencepixelphysicalvaluex.length >=1){\n      x.mpp_x = data.referencepixelphysicalvaluex[0].value\n      x.mpp = this.mpp_x\n    }\n    if (data.field_iip_path && data.field_iip_path.length >= 1) {\n      x.location = data.field_iip_path[0].value\n      x.url = \"../../img/IIP/raw/?DeepZoom=\" + x.location + \".dzi\"\n    } else {\n      throw \"no iip path in pathdb data\"\n    }\n    // identifier fields for display name\n    var subject_id = \"\"\n    var image_id = \"\"\n    var study_id = \"\"\n    if(data.field_subject_id && data.field_subject_id.length >= 1){\n      subject_id = data.field_subject_id[0].value\n    }\n    if(data.clinicaltrialsubjectid && data.clinicaltrialsubjectid.length >= 1){\n      subject_id = data.clinicaltrialsubjectid[0].value\n    }\n    if(data.field_image_id && data.field_image_id.length >=1){\n      image_id = data.field_image_id[0].value\n    }\n    if(data.imageid && data.imageid.length >=1){\n      image_id = data.imageid[0].value\n    }\n    if(data.field_study_id && data.field_study_id.length >=1){\n      study_id = data.field_study_id[0].value\n    }\n    if(data.studyid && data.studyid.length >=1){\n      study_id = data.studyid[0].value\n    }\n    // if we have the triple, add it\n    if (subject_id && image_id && study_id){\n      x.name = study_id + ' | ' + subject_id + ' | ' + image_id;\n    }\n    return x\n  }\n\n  /**\n  Gets a named cookie value\n  * @param {string} key - the key to get from the cookie\n  **/\n  function getCookie(key) {\n    var cookiestring = RegExp(\"\" + key + \"[^;]+\").exec(document.cookie);\n    return decodeURIComponent(!!cookiestring ? cookiestring.toString().replace(/^[^=]+./, \"\") : \"\");\n  }\n  console.warn(\"{PathDB mods enabled}\")\n  Store.prototype.default_findSlide = Store.prototype.findSlide;\n  Store.prototype.findSlide = function(slide, specimen, study, location) {\n    var url = \"/node/\" + slide + \"?_format=json\"\n    return fetch(url, {\n      mode: \"cors\",\n      headers: new Headers({\n        'Authorization': 'Bearer ' + getCookie(\"token\"),\n      })\n    }).then(function(response) {\n      if (!response.ok) return {\n        error: !response.ok,\n        text: response.statusText,\n        url: response.url\n      };\n      return response.json().then(convertPathDbSlide).then(x => [x]);\n    })\n  }\n  Store.prototype.default_getSlide = Store.prototype.getSlide\n  Store.prototype.getSlide = function(id) {\n    var url = \"/node/\" + id + \"?_format=json\"\n    return fetch(url, {\n      mode: \"cors\",\n      headers: new Headers({\n        'Authorization': 'Bearer ' + getCookie(\"token\"),\n      })\n    }).then(function(response) {\n      if (!response.ok) return {\n        error: !response.ok,\n        text: response.statusText,\n        url: response.url\n      };\n      return response.json().then(convertPathDbSlide).then(x => [x]);\n    })\n  }\n\n  StatesHelper.prototype.default_getCurrentStatesURL = StatesHelper.prototype.getCurrentStatesURL;\n  getCurrentStatesURL = function(isImageCoordinate=false){\n    let states = StatesHelper.getCurrentStates(isImageCoordinate);\n    if(!states)return;\n    console.log(states);\n    states = StatesHelper.encodeStates(states);\n    return `${location.origin}${location.pathname}?slideId=${$D.params.slideId}&states=${$D.params.states}&mode=${$D.params.mode}`\n  };\n\n}\n\n\nPathDbMods()\nconsole.warn(\"This Setup Is Intended For Pathdb\")\n"]}