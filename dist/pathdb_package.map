{"version":3,"sources":["pathdb_package.js"],"names":["PathDbMods","convertPathDbSlide","data","x","mpp","source","pathdbid","nid","value","location","field_iip_path","field_mpp_y","length","mpp_y","field_mpp_x","mpp_x","referencepixelphysicalvaluey","referencepixelphysicalvaluex","url","getCookie","key","cookiestring","RegExp","exec","document","cookie","decodeURIComponent","toString","replace","log","then","json","hasOwnProperty","token","warn","prototype","default_findSlide","Store","findSlide","slide","specimen","study","fetch","Headers","response","ok","statusText","default_getSlide","getSlide","id","default_getCurrentStatesURL","StatesHelper","getCurrentStatesURL","isImageCoordinate","states","getCurrentStates","encodeStates","origin","pathname","$D","params","slideId","mode","console"],"mappings":"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","file":"pathdb_package.map","sourceRoot":"../package","sourcesContent":["function PathDbMods() {\n  console.log(\"PathDbMods()...\");\n  // put the auth jwt in cookie as token\n  fetch(\"/jwt/token\", {\n    method: 'GET',\n    credentials: 'include'\n  }).then(x => x.json()).then(x => {\n    console.log(x)\n    if (x.hasOwnProperty('token') && x.token) {\n      document.cookie = \"token=\" + x.token + \";\"\n    }\n  })\n\n  function convertPathDbSlide(data){\n    let x={}\n    x[\"_raw\"] = data\n    x.mpp = 1e9\n    x.source=\"pathdb\"\n    let pathdbid = data.nid[0].value\n    x[\"_id\"] = {\"$oid\": pathdbid}\n    x.location = data.field_iip_path[0].value\n    if (data.field_mpp_y && data.field_mpp_y.length >= 1) {\n      this.mpp_y = data.field_mpp_y[0].value\n      this.mpp = this.mpp_y\n    }\n    if (data.field_mpp_x && data.field_mpp_x.length >= 1) {\n      x.mpp_x = data.field_mpp_x[0].value\n      x.mpp = this.mpp_x\n    }\n    if (data.referencepixelphysicalvaluey && data.referencepixelphysicalvaluey.length >=1){\n      x.mpp_y = data.referencepixelphysicalvaluey[0].value\n      x.mpp = this.mpp_y\n    }\n    if (data.referencepixelphysicalvaluex && data.referencepixelphysicalvaluex.length >=1){\n      x.mpp_x = data.referencepixelphysicalvaluex[0].value\n      x.mpp = this.mpp_x\n    }\n    if (data.field_iip_path && data.field_iip_path.length >= 1) {\n      x.location = data.field_iip_path[0].value\n      x.url = \"../../img/IIP/raw/?DeepZoom=\" + x.location + \".dzi\"\n    } else {\n      throw \"no iip path in pathdb data\"\n    }\n    return x\n  }\n\n  /**\n  Gets a named cookie value\n  * @param {string} key - the key to get from the cookie\n  **/\n  function getCookie(key) {\n    var cookiestring = RegExp(\"\" + key + \"[^;]+\").exec(document.cookie);\n    return decodeURIComponent(!!cookiestring ? cookiestring.toString().replace(/^[^=]+./, \"\") : \"\");\n  }\n  console.warn(\"{PathDB mods enabled}\")\n  Store.prototype.default_findSlide = Store.prototype.findSlide;\n  Store.prototype.findSlide = function(slide, specimen, study, location) {\n    var url = \"/node/\" + slide + \"?_format=json\"\n    return fetch(url, {\n      mode: \"cors\",\n      headers: new Headers({\n        'Authorization': 'Bearer ' + getCookie(\"token\"),\n      })\n    }).then(function(response) {\n      if (!response.ok) return {\n        error: !response.ok,\n        text: response.statusText,\n        url: response.url\n      };\n      return response.json().then(convertPathDbSlide).then(x => [x]);\n    })\n  }\n  Store.prototype.default_getSlide = Store.prototype.getSlide\n  Store.prototype.getSlide = function(id) {\n    var url = \"/node/\" + id + \"?_format=json\"\n    return fetch(url, {\n      mode: \"cors\",\n      headers: new Headers({\n        'Authorization': 'Bearer ' + getCookie(\"token\"),\n      })\n    }).then(function(response) {\n      if (!response.ok) return {\n        error: !response.ok,\n        text: response.statusText,\n        url: response.url\n      };\n      return response.json().then(convertPathDbSlide).then(x => [x]);\n    })\n  }\n\n  StatesHelper.prototype.default_getCurrentStatesURL = StatesHelper.prototype.getCurrentStatesURL;\n  getCurrentStatesURL = function(isImageCoordinate=false){\n    let states = StatesHelper.getCurrentStates(isImageCoordinate);\n    if(!states)return;\n    console.log(states);\n    states = StatesHelper.encodeStates(states);\n    return `${location.origin}${location.pathname}?slideId=${$D.params.slideId}&states=${$D.params.states}&mode=${$D.params.mode}`\n  };\n\n  /**\n  CaMic.prototype.default_loadImg = CaMic.prototype.loadImg\n  CaMic.prototype.loadImg = function(func) {\n    var urlParams = new URLSearchParams(window.location.search);\n    var pathdb_id = urlParams.get('slideId');\n    this.slideId = pathdb_id // default value\n    this.slideName = pathdb_id\n    this.store.getSlide(pathdb_id).then(data => {\n      data = data[0]\n      console.log(data)\n      this.location = data.location\n      // MAKE URL FOR IIP\n      this.url = data.url\n      this.viewer.open(this.url);\n\n      this.viewer.mpp = this.mpp;\n      this.viewer.mpp_x = this.mpp_x;\n      this.viewer.mpp_y = this.mpp_y;\n\n      //set scalebar\n      if (this.mpp && this.mpp != 1e9) this.createScalebar(this.mpp)\n      var imagingHelper = new OpenSeadragonImaging.ImagingHelper({\n        viewer: this.viewer\n      });\n      imagingHelper.setMaxZoom(1);\n      // create item to pass to the callback function, previously x[0] (slide data)\n      let x = {}\n      x['_id'] = this.slideId\n      x.name = this.slideName\n      // other slide data\n      x.mpp = this.mpp;\n      x.mpp_x = this.mpp_x;\n      x.mpp_y = this.mpp_y;\n      x.location = this.location;\n      x.url = this.url;\n      x.rawData = this.rawData\n      if (func && typeof func === 'function') {\n        func.call(null, x);\n      }\n      Loading.text.textContent = `Loading Slide's Tiles...`;\n      // we may want another init.js or our own callback\n    }).catch(e => {\n      console.error(e)\n      Loading.text.textContent = \"ERROR - PathDB Image Error (Try A Refresh)\"\n      //if(func && typeof func === 'function') func.call(null,{hasError:true,message:e});\n    })\n\n  }\n  **/\n}\n\n\nPathDbMods()\nconsole.warn(\"This Setup Is Intended For Pathdb\")\n"]}