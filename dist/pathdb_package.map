{"version":3,"sources":["pathdb_package.js"],"names":["PathDbMods","getCookie","key","cookiestring","RegExp","exec","document","cookie","decodeURIComponent","toString","replace","log","then","x","json","hasOwnProperty","token","warn","prototype","default_findSlide","Store","findSlide","slide","specimen","study","location","fetch","Headers","response","ok","statusText","url","default_getSlide","getSlide","id","default_getCurrentStatesURL","StatesHelper","getCurrentStatesURL","isImageCoordinate","states","getCurrentStates","encodeStates","origin","pathname","$D","params","slideId","mode","default_loadImg","CaMic","loadImg","func","pathdb_id","URLSearchParams","window","search","get","slideName","store","data","mpp","rawData","field_mpp_y","length","mpp_y","value","field_mpp_x","mpp_x","referencepixelphysicalvaluey","referencepixelphysicalvaluex","pdb_hm_name","image_id","field_iip_path","viewer","open","createScalebar","OpenSeadragonImaging","ImagingHelper","setMaxZoom","name","call","text","textContent","catch","error","e","console"],"mappings":"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","file":"pathdb_package.map","sourceRoot":"../package","sourcesContent":["function PathDbMods() {\n  console.log(\"PathDbMods()...\");\n  // put the auth jwt in cookie as token\n  fetch(\"/jwt/token\", {\n    method: 'GET',\n    credentials: 'include'\n  }).then(x => x.json()).then(x => {\n    console.log(x)\n    if (x.hasOwnProperty('token') && x.token) {\n      document.cookie = \"token=\" + x.token + \";\"\n    }\n  })\n  /**\n  Gets a named cookie value\n  * @param {string} key - the key to get from the cookie\n  **/\n  function getCookie(key) {\n    var cookiestring = RegExp(\"\" + key + \"[^;]+\").exec(document.cookie);\n    return decodeURIComponent(!!cookiestring ? cookiestring.toString().replace(/^[^=]+./, \"\") : \"\");\n  }\n  console.warn(\"{PathDB mods enabled}\")\n  Store.prototype.default_findSlide = Store.prototype.findSlide;\n  Store.prototype.findSlide = function(slide, specimen, study, location) {\n    var url = \"/node/\" + slide + \"?_format=json\"\n    return fetch(url, {\n      mode: \"cors\",\n      headers: new Headers({\n        'Authorization': 'Bearer ' + getCookie(\"token\"),\n      })\n    }).then(function(response) {\n      if (!response.ok) return {\n        error: !response.ok,\n        text: response.statusText,\n        url: response.url\n      };\n      return response.json().then(x => [x]);\n    })\n  }\n  Store.prototype.default_getSlide = Store.prototype.getSlide\n  Store.prototype.getSlide = function(id) {\n    var url = \"/node/\" + id + \"?_format=json\"\n    return fetch(url, {\n      mode: \"cors\",\n      headers: new Headers({\n        'Authorization': 'Bearer ' + getCookie(\"token\"),\n      })\n    }).then(function(response) {\n      if (!response.ok) return {\n        error: !response.ok,\n        text: response.statusText,\n        url: response.url\n      };\n      return response.json().then(x => [x]);\n    })\n  }\n\n  StatesHelper.prototype.default_getCurrentStatesURL = StatesHelper.prototype.getCurrentStatesURL;\n  getCurrentStatesURL = function(isImageCoordinate=false){\n    let states = StatesHelper.getCurrentStates(isImageCoordinate);\n    if(!states)return;\n    console.log(states);\n    states = StatesHelper.encodeStates(states);\n    return `${location.origin}${location.pathname}?slideId=${$D.params.slideId}&states=${$D.params.states}&mode=${$D.params.mode}`\n  };\n\n\n  CaMic.prototype.default_loadImg = CaMic.prototype.loadImg\n  CaMic.prototype.loadImg = function(func) {\n    var urlParams = new URLSearchParams(window.location.search);\n    var pathdb_id = urlParams.get('slideId');\n    this.slideId = pathdb_id // default value\n    this.slideName = pathdb_id\n    this.store.getSlide(pathdb_id).then(data => {\n      data = data[0]\n      console.log(data)\n      // set mpp\n      this.mpp = 1e9\n      this.rawData = data\n\n      if (data.field_mpp_y && data.field_mpp_y.length >= 1) {\n        this.mpp_y = data.field_mpp_y[0].value\n        this.mpp = this.mpp_y\n      }\n      if (data.field_mpp_x && data.field_mpp_x.length >= 1) {\n        this.mpp_x = data.field_mpp_x[0].value\n        this.mpp = this.mpp_x\n      }\n      if (data.referencepixelphysicalvaluey && data.referencepixelphysicalvaluey.length >=1){\n        this.mpp_y = data.referencepixelphysicalvaluey[0].value\n        this.mpp = this.mpp_y\n      }\n      if (data.referencepixelphysicalvaluex && data.referencepixelphysicalvaluex.length >=1){\n        this.mpp_x = data.referencepixelphysicalvaluex[0].value\n        this.mpp = this.mpp_x\n      }\n      Store.prototype.pdb_hm_name = this.image_id\n\n      if (data.field_iip_path && data.field_iip_path.length >= 1) {\n        this.location = data.field_iip_path[0].value\n        // MAKE URL FOR IIP\n        this.url = \"../../img/IIP/raw/?DeepZoom=\" + this.location + \".dzi\"\n        this.viewer.open(this.url);\n      } else {\n        throw \"No image location --could be token\"\n      }\n\n      this.viewer.mpp = this.mpp;\n      this.viewer.mpp_x = this.mpp_x;\n      this.viewer.mpp_y = this.mpp_y;\n\n      //set scalebar\n      if (this.mpp && this.mpp != 1e9) this.createScalebar(this.mpp)\n      var imagingHelper = new OpenSeadragonImaging.ImagingHelper({\n        viewer: this.viewer\n      });\n      imagingHelper.setMaxZoom(1);\n      // create item to pass to the callback function, previously x[0] (slide data)\n      let x = {}\n      x['_id'] = this.slideId\n      x.name = this.slideName\n      // other slide data\n      x.mpp = this.mpp;\n      x.mpp_x = this.mpp_x;\n      x.mpp_y = this.mpp_y;\n      x.location = this.location;\n      x.url = this.url;\n      x.rawData = this.rawData\n      if (func && typeof func === 'function') {\n        func.call(null, x);\n      }\n      Loading.text.textContent = `Loading Slide's Tiles...`;\n      // we may want another init.js or our own callback\n    }).catch(e => {\n      console.error(e)\n      Loading.text.textContent = \"ERROR - PathDB Image Error (Try A Refresh)\"\n      //if(func && typeof func === 'function') func.call(null,{hasError:true,message:e});\n    })\n\n  }\n}\n\n\nPathDbMods()\nconsole.warn(\"This Setup Is Intended For Pathdb\")\n"]}